@page "/Contacts/edit/{id:int}"
@page "/contacts/new"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id is not null)
{
    <h3>Edit @contact.NickName</h3>
}
else
{
    <h3>Create a New Contact</h3>

}
<div>
    <EditForm Model="contact" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator/>
        <SfTextBox CssClass="e-outline" Placeholder="FirstName" FloatLabelType="FloatLabelType.Auto" @bind-Value="contact.FirstName"></SfTextBox>
        <SfTextBox CssClass="e-outline" Placeholder="LastName" FloatLabelType="FloatLabelType.Auto" @bind-Value="contact.LastName"></SfTextBox>
        <SfTextBox CssClass="e-outline" Placeholder="NickName" FloatLabelType="FloatLabelType.Auto" @bind-Value="contact.NickName"></SfTextBox>
        <ValidationMessage For="(()=>contact.NickName)"/>
        <SfTextBox CssClass="e-outline" Placeholder="Place" FloatLabelType="FloatLabelType.Auto" @bind-Value="contact.Place"></SfTextBox>
        <SfDatePicker TValue="DateTime?" Placeholder="Date Of Birth" FloatLabelType="FloatLabelType.Auto" @bind-Value="contact.DateOfBirth" Format="MM/dd/yyyy" />
        <hr />

        <SfButton CssClass="e-primary" IconCss="e-icons e-save" Content="Save" type="submit" />

    </EditForm>
    <p>
        <SfMessage Severity="MessageSeverity.Success" Visible="showSuccessMessage">Contact Saved Successfully.</SfMessage>
        <SfMessage Severity="MessageSeverity.Error" Visible="showErrorMessage">Something Went Wrong.</SfMessage>
    </p>

    @if(Id is not null)
    {
        <h3>Notes</h3>
        <SfTextBox CssClass="e-outLine" Placeholder="New Note" Multiline="true"
        FloatLabelType="@FloatLabelType.Auto" @bind-Value="newNote.Text"></SfTextBox>
        <SfButton CssClass="e-inherit" Content="Add Note" OnClick="CreateNote"></SfButton>
        <hr />
        <p >
            <SfButton IsPrimary="true" Content="Load All notes" OnClick="LoadNotes"></SfButton>
        </p>
        @foreach(var note in notes)
        {
            <SfCard >
                <CardHeader Title="@note.DateCreated.ToString()"></CardHeader>
                <CardContent Content="@note.Text"></CardContent>
                <CardFooter>
                    <CardFooterContent>
                        <SfButton Content="Delete" IsPrimary="true" OnClick="@(()=> DeleteNote(note.Id))"></SfButton>
                    </CardFooterContent>
                </CardFooter>
            </SfCard>
            <br />
        }
    }


</div>
@code {
    [Parameter]
    public int? Id { get; set; }
    public List<Note> notes { get; set; } = new List<Note>();
    public Note newNote { get; set; } = new Note { Text = string.Empty };
    public Contact contact { get; set; } = new Contact();
    bool showErrorMessage = false;
    bool showSuccessMessage = false;


    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            var result = await Http.GetAsync($"api/contacts/{Id}");
            if (result.IsSuccessStatusCode)
            {
                var jasonResult = await result.Content.ReadFromJsonAsync<Contact>();
                if (jasonResult is not null)
                {
                    contact = jasonResult;
                }
                else
                {
                    NavigationManager.NavigateTo("/contacts/new");
                }
            }
        }
    }
    async Task CreateNote()
    {
        if(Id is null)
        {
            return;
        }
        newNote.ContactId = Id;
        var result = await Http.PostAsJsonAsync($"api/notes", newNote);
        if (result.IsSuccessStatusCode)
        {
            await LoadNotes();
        }
    }
    async  Task LoadNotes()
    {
        var result = await Http.GetAsync($"api/notes/{contact.Id}");
        var jasonResult = await result.Content.ReadFromJsonAsync<List<Note>>();
        if (jasonResult is not null)
        {
            notes = jasonResult;
        }
    }
    async Task DeleteNote(int noteId)
    {
        var result = await Http.DeleteFromJsonAsync<List<Note>>($"api/notes/{noteId}");
        if(result is not null)
        {
            notes = result;
        }
    }

    async Task HandleSubmit()
    {
        HttpResponseMessage result;
        if (Id is not null)
            result = await Http.PutAsJsonAsync($"api/contacts/{contact.Id}", contact);
        else
        {
            result = await Http.PostAsJsonAsync($"api/contacts", contact);
        }
        if (result.IsSuccessStatusCode)
        {
            var jsonResult = await result.Content.ReadFromJsonAsync<Contact>();
            if(jsonResult is not null)
            {
                contact = jsonResult;
                showSuccessMessage = true;
            }
        }
        else
        {
            showErrorMessage = true;
        }

    }


}
